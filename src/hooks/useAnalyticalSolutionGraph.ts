import { besselj } from "bessel";
import { SchemeUtil } from "@/util/scheme";

interface IProps {
  I: number;
  K: number;
  k: number; // Номер временного слоя
}

/**
 * Хук для вычисления аналитического решения
 * @returns график аналитического решения
 */
export const useAnalyticalSolutionGraph = ({ I, K, k }: IProps) => {
  const GPAPH_LABEL = "Аналитическое решение";
  const { R, kT, c, alpha, beta, l, h_t, createRAxis } = SchemeUtil;
  const n = 20; // Кол-во членов ряда Фурье

  const μ = [
    0, 3.831705970207512468306276787188835442066192627,
    7.015586669815618847678706515580415725708007812,
    10.173468135062721628969484299886971712112426758,
    13.323691936314222772352877655066549777984619141,
    16.470630050877634431572005269117653369903564453,
    19.615858510468243025570700410753488540649414062,
    22.760084380592772390627942513674497604370117188,
    25.903672087618382136042782803997397422790527344,
    29.046828534916855346637021284550428390502929688,
    32.1896799109744051747838966548442840576171875,
    35.332307550083868363799410872161388397216796875,
    38.474766234771614392684568883851170539855957031,
    41.617094212814450315818248782306909561157226562,
    44.759318997652819405175250722095370292663574219,
    47.901460887185443482394475722685456275939941406,
    51.043535183571506763655634131282567977905273438,
    54.185553641061318330685026012361049652099609375,
    57.327525437901009297547716414555907249450683594,
    60.469457845347491797838301863521337509155273438,
    63.611356698481230864672397729009389877319335938,
    66.753226734098490169344586320221424102783203125,
    69.89507183749577734488411806523799896240234375,
    73.036895225573843504207616206258535385131835938,
    76.178699584641464070955407805740833282470703125,
    79.320487175476301899834652431309223175048828125,
    82.462259914373561286993208341300487518310546875,
    85.604019436350228033916209824383258819580078125,
    88.745767144926304581531439907848834991455078125,
    91.887504251694991808108170516788959503173828125,
    95.02923180804469893701025284826755523681640625,
    98.170950730790778493428661022335290908813476562,
    101.312661823038737907154427375644445419311523438,
    104.454365791282754116764408536255359649658203125,
    107.596063259509165277449938002973794937133789062,
    110.737754780899223305823397822678089141845703125,
  ];

  const Ф = (N: number) => {
    return (60 * beta * R) / (Math.PI * kT * N);
  };

  const J_n = (x: number, N: number) => {
    return besselj(x, N);
  };

  const λ = (i: number) => {
    return (-Math.pow(μ[i], 2) * kT) / Math.pow(R, 2) - (2 * alpha) / l;
  };

  const B = (i: number) => {
    if (i === 0) {
      if (R >= 0.2) {
        return (12 * beta) / Math.pow(R, 2);
      } else {
        return 300 * beta;
      }
    }
    return (
      (120 * beta * J_n((μ[i] * 0.2) / R, 1)) /
      (R * Math.pow(J_n(μ[i], 0), 2) * μ[i])
    );
  };

  const U = (r: number, t: number) => {
    let result = 0;
    for (let i = 0; i <= n; i++) {
      const lambda = λ(i);
      result +=
        ((B(i) * (Math.pow(Math.E, (lambda * t) / c) - 1)) / lambda) *
        J_n((μ[i] * r) / R, 0);
    }
    return result;
  };

  const factorial = (x: number) => {
    let result = 1;
    if (x === 0) {
      return 1;
    }
    if (x < 0) {
      console.log("Беда факториал");
      return undefined;
    }
    for (let i = 2; i <= x; i++) {
      result *= i;
    }
    return result;
  };

  // Алгоритм
  const rAxis = createRAxis(I);
  const solutionGraph: any = [...rAxis].map((r) => ({
    r,
  }));

  for (const solutionGraphPoint of solutionGraph) {
    const r = solutionGraphPoint.r;
    const t = h_t(K) * k;
    solutionGraphPoint[GPAPH_LABEL] = U(r, t);
  }

  return solutionGraph;
};

/*
  const data = [
    {
      r: 4000,
      "Аналитическое решение": 2400,
    },
    {
      r: 3000,
      "Аналитическое решение": 2210,
    },
    {
      r: 2000,
      "Аналитическое решение": 2290,
    },
    {
      r: 2780,
      "Аналитическое решение": 2000,
    },
    {
      r: 1890,
      "Аналитическое решение": 2181,
    },
    {
      r: 2390,
      "Аналитическое решение": 2500,
    },
    {
      r: 3490,
      "Аналитическое решение": 2100,
    },
  ];

*/
